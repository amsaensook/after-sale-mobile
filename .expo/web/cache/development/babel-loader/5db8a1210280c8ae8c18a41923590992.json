{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { PermissionStatus, createPermissionHook, UnavailabilityError } from 'expo-modules-core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoBarCodeScannerModule from \"./ExpoBarCodeScannerModule\";\nimport ExpoBarCodeScannerView from \"./ExpoBarCodeScannerView\";\nvar BarCodeType = ExpoBarCodeScannerModule.BarCodeType,\n  Type = ExpoBarCodeScannerModule.Type;\nvar EVENT_THROTTLE_MS = 500;\nexport var BarCodeScanner = function (_React$Component) {\n  _inherits(BarCodeScanner, _React$Component);\n  var _super = _createSuper(BarCodeScanner);\n  function BarCodeScanner() {\n    var _this;\n    _classCallCheck(this, BarCodeScanner);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.lastEvents = {};\n    _this.lastEventsTimes = {};\n    _this.onObjectDetected = function (callback) {\n      return function (_ref) {\n        var nativeEvent = _ref.nativeEvent;\n        var type = nativeEvent.type;\n        if (_this.lastEvents[type] && _this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this.lastEvents[type] && Date.now() - _this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {\n          return;\n        }\n        if (callback) {\n          callback(nativeEvent);\n          _this.lastEventsTimes[type] = new Date();\n          _this.lastEvents[type] = JSON.stringify(nativeEvent);\n        }\n      };\n    };\n    return _this;\n  }\n  _createClass(BarCodeScanner, [{\n    key: \"render\",\n    value: function render() {\n      var nativeProps = this.convertNativeProps(this.props);\n      var onBarCodeScanned = this.props.onBarCodeScanned;\n      return React.createElement(ExpoBarCodeScannerView, _objectSpread(_objectSpread({}, nativeProps), {}, {\n        onBarCodeScanned: this.onObjectDetected(onBarCodeScanned)\n      }));\n    }\n  }, {\n    key: \"convertNativeProps\",\n    value: function convertNativeProps(props) {\n      var nativeProps = {};\n      for (var _i = 0, _Object$entries = Object.entries(props); _i < _Object$entries.length; _i++) {\n        var _ref2 = _Object$entries[_i];\n        var _ref3 = _slicedToArray(_ref2, 2);\n        var key = _ref3[0];\n        var value = _ref3[1];\n        if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n          nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n        } else {\n          nativeProps[key] = value;\n        }\n      }\n      return nativeProps;\n    }\n  }], [{\n    key: \"getPermissionsAsync\",\n    value: function getPermissionsAsync() {\n      return _regeneratorRuntime.async(function getPermissionsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", ExpoBarCodeScannerModule.getPermissionsAsync());\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"requestPermissionsAsync\",\n    value: function requestPermissionsAsync() {\n      return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", ExpoBarCodeScannerModule.requestPermissionsAsync());\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"scanFromURLAsync\",\n    value: function scanFromURLAsync(url) {\n      var barCodeTypes,\n        _args3 = arguments;\n      return _regeneratorRuntime.async(function scanFromURLAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              barCodeTypes = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : Object.values(BarCodeType);\n              if (ExpoBarCodeScannerModule.scanFromURLAsync) {\n                _context3.next = 3;\n                break;\n              }\n              throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n            case 3:\n              if (!(Array.isArray(barCodeTypes) && !barCodeTypes.length)) {\n                _context3.next = 5;\n                break;\n              }\n              throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n            case 5:\n              if (!(Platform.OS === 'ios')) {\n                _context3.next = 11;\n                break;\n              }\n              if (!(Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr))) {\n                _context3.next = 8;\n                break;\n              }\n              throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n            case 8:\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]));\n            case 10:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 11:\n              _context3.next = 13;\n              return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes));\n            case 13:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n  return BarCodeScanner;\n}(React.Component);\nBarCodeScanner.Constants = {\n  BarCodeType: BarCodeType,\n  Type: Type\n};\nBarCodeScanner.ConversionTables = {\n  type: Type\n};\nBarCodeScanner.defaultProps = {\n  type: Type.back,\n  barCodeTypes: Object.values(BarCodeType)\n};\nBarCodeScanner.usePermissions = createPermissionHook({\n  getMethod: BarCodeScanner.getPermissionsAsync,\n  requestMethod: BarCodeScanner.requestPermissionsAsync\n});\nexport { PermissionStatus };\nvar Constants = BarCodeScanner.Constants,\n  getPermissionsAsync = BarCodeScanner.getPermissionsAsync,\n  requestPermissionsAsync = BarCodeScanner.requestPermissionsAsync,\n  usePermissions = BarCodeScanner.usePermissions,\n  scanFromURLAsync = BarCodeScanner.scanFromURLAsync;\nexport { Constants, getPermissionsAsync, requestPermissionsAsync, usePermissions, scanFromURLAsync };","map":{"version":3,"sources":["../src/BarCodeScanner.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport * as React from 'react';\nimport { Platform, ViewProps } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\n// @needsAudit\n/**\n * Those coordinates are represented in the coordinate space of the barcode source (e.g. when you\n * are using the barcode scanner view, these values are adjusted to the dimensions of the view).\n */\nexport type BarCodePoint = {\n  /**\n   * The `x` coordinate value.\n   */\n  x: number;\n  /**\n   * The `y` coordinate value.\n   */\n  y: number;\n};\n\n// @needsAudit\nexport type BarCodeSize = {\n  /**\n   * The height value.\n   */\n  height: number;\n  /**\n   * The width value.\n   */\n  width: number;\n};\n\n// @needsAudit\nexport type BarCodeBounds = {\n  /**\n   * The origin point of the bounding box.\n   */\n  origin: BarCodePoint;\n  /**\n   * The size of the bounding box.\n   */\n  size: BarCodeSize;\n};\n\n// @needsAudit\n/**\n * > __Note:__ `bounds` and `cornerPoints` are not always available. On iOS, for `code39` and `pdf417`\n * > you don't get those values. Moreover, on iOS, those values don't have to bounds the whole barcode.\n * > For some types, they will represent the area used by the scanner.\n */\nexport type BarCodeScannerResult = {\n  /**\n   * The barcode type.\n   */\n  type: string;\n  /**\n   * The information encoded in the bar code.\n   */\n  data: string;\n  /**\n   * The [BarCodeBounds](#barcodebounds) object.\n   */\n  bounds?: BarCodeBounds;\n  /**\n   * Corner points of the bounding box.\n   */\n  cornerPoints?: BarCodePoint[];\n};\n\n// @docsMissing\nexport type BarCodeEvent = BarCodeScannerResult & {\n  target?: number;\n};\n\n// @docsMissing\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\n// @docsMissing\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\n// @needsAudit\nexport type BarCodeScannerProps = ViewProps & {\n  /**\n   * Camera facing. Use one of `BarCodeScanner.Constants.Type`. Use either `Type.front` or `Type.back`.\n   * Same as `Camera.Constants.Type`.\n   * @default Type.back\n   */\n  type?: 'front' | 'back' | number;\n  /**\n   * An array of bar code types. Usage: `BarCodeScanner.Constants.BarCodeType.<codeType>` where\n   * `codeType` is one of these [listed above](#supported-formats). Defaults to all supported bar\n   * code types. It is recommended to provide only the bar code formats you expect to scan to\n   * minimize battery usage.\n   *\n   * For example: `barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}`.\n   */\n  barCodeTypes?: string[];\n  /**\n   * A callback that is invoked when a bar code has been successfully scanned. The callback is\n   * provided with an [BarCodeScannerResult](#barcodescannerresult).\n   * > __Note:__ Passing `undefined` to the `onBarCodeScanned` prop will result in no scanning. This\n   * > can be used to effectively \"pause\" the scanner so that it doesn't continually scan even after\n   * > data has been retrieved.\n   */\n  onBarCodeScanned?: BarCodeScannedCallback;\n};\n\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing the camera.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for accessing the camera.\n   *\n   * On iOS this will require apps to specify the `NSCameraUsageDescription` entry in the `Info.plist`.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Check or request permissions for the barcode scanner.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [status, requestPermission] = BarCodeScanner.usePermissions();\n   * ```\n   */\n  static usePermissions = createPermissionHook({\n    getMethod: BarCodeScanner.getPermissionsAsync,\n    requestMethod: BarCodeScanner.requestPermissionsAsync,\n  });\n\n  // @needsAudit\n  /**\n   * Scan bar codes from the image given by the URL.\n   * @param url URL to get the image from.\n   * @param barCodeTypes An array of bar code types. Defaults to all supported bar code types on\n   * the platform.\n   * > __Note:__ Only QR codes are supported on iOS.\n   * @return A possibly empty array of objects of the `BarCodeScannerResult` shape, where the type\n   * refers to the bar code type that was scanned and the data is the information encoded in the bar\n   * code.\n   */\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<BarCodeScannerResult[]> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  onObjectDetected =\n    (callback?: BarCodeScannedCallback) =>\n    ({ nativeEvent }: BarCodeEventCallbackArguments) => {\n      const { type } = nativeEvent;\n      if (\n        this.lastEvents[type] &&\n        this.lastEventsTimes[type] &&\n        JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n        Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n      ) {\n        return;\n      }\n\n      if (callback) {\n        callback(nativeEvent);\n        this.lastEventsTimes[type] = new Date();\n        this.lastEvents[type] = JSON.stringify(nativeEvent);\n      }\n    };\n\n  /**\n   * @hidden\n   */\n  convertNativeProps(props: BarCodeScannerProps) {\n    const nativeProps: BarCodeScannerProps = {};\n\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n\n    return nativeProps;\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\nexport const {\n  Constants,\n  getPermissionsAsync,\n  requestPermissionsAsync,\n  usePermissions,\n  scanFromURLAsync,\n} = BarCodeScanner;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}