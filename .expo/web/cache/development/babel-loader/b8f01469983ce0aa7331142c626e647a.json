{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"hideDragIndicator\"],\n  _excluded2 = [\"isOpen\", \"disableOverlay\", \"onClose\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { Modal } from \"../../composites/Modal\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { ActionSheetContext } from \"./ActionSheetContext\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Actionsheet = function Actionsheet(_ref, ref) {\n  var children = _ref.children,\n    _ref$hideDragIndicato = _ref.hideDragIndicator,\n    hideDragIndicator = _ref$hideDragIndicato === void 0 ? false : _ref$hideDragIndicato,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _usePropsResolution = usePropsResolution('Actionsheet', props),\n    isOpen = _usePropsResolution.isOpen,\n    disableOverlay = _usePropsResolution.disableOverlay,\n    onClose = _usePropsResolution.onClose,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose\n  }, resolvedProps, {\n    overlayVisible: disableOverlay ? false : true,\n    closeOnOverlayClick: disableOverlay ? false : true,\n    ref: ref\n  }), React.createElement(ActionSheetContext.Provider, {\n    value: {\n      hideDragIndicator: hideDragIndicator\n    }\n  }, children));\n};\nexport default memo(forwardRef(Actionsheet));","map":{"version":3,"sources":["Actionsheet.tsx"],"names":["React","memo","forwardRef","Modal","usePropsResolution","ActionSheetContext","useHasResponsiveProps","Actionsheet","children","hideDragIndicator","props","ref","isOpen","disableOverlay","onClose","resolvedProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,KAAT;AAEA,SAASC,kBAAT;AACA,SAASC,kBAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAA,IAAA,EAEfI,GAFkB,EAGf;EAAA,IAFDH,QAAF,GAAA,IAAA,CAAEA,QAAF;IAAA,qBAAA,GAAA,IAAA,CAAYC,iBAAiB;IAAjBA,iBAAiB,GAAA,qBAAA,cAAG,KAAhC,GAAA,qBAAA;IAA0CC,KAAAA,GAAAA,wBAAAA,CAAAA,IAAAA,EAAAA,SAAAA;EAG1C,IAAA,mBAAA,GAKIN,kBAAkB,CAAC,aAAD,EAAgBM,KAAhB,CANnB;IAEDE,MADI,GAAA,mBAAA,CACJA,MADI;IAEJC,cAFI,GAAA,mBAAA,CAEJA,cAFI;IAGJC,OAHI,GAAA,mBAAA,CAGJA,OAHI;IAIDC,aAAAA,GAAAA,wBAAAA,CAAAA,mBAAAA,EAAAA,UAAAA;EAIL,IAAIT,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACE,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA,QAAA,CAAA;IACE,MAAM,EAAEE,MADV;IAEE,OAAO,EAAEE;EAFX,CAAA,EAGMC,aAHN,EAAA;IAIE,cAAc,EAAEF,cAAc,GAAG,KAAH,GAAW,IAJ3C;IAKE,mBAAmB,EAAEA,cAAc,GAAG,KAAH,GAAW,IALhD;IAME,GAAG,EAAEF;EANP,CAAA,CAAA,EAQE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAoB,QAApB,EAAA;IAA6B,KAAK,EAAE;MAAEF,iBAAAA,EAAAA;IAAF;EAApC,CAAA,EACGD,QADH,CARF,CADF;AAcD,CA7BD;AA+BA,eAAeP,IAAI,CAACC,UAAU,CAACK,WAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Actionsheet = (\n  { children, hideDragIndicator = false, ...props }: IActionsheetProps,\n  ref: any\n) => {\n  const {\n    isOpen,\n    disableOverlay,\n    onClose,\n    ...resolvedProps\n  } = usePropsResolution('Actionsheet', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      {...resolvedProps}\n      overlayVisible={disableOverlay ? false : true}\n      closeOnOverlayClick={disableOverlay ? false : true}\n      ref={ref}\n    >\n      <ActionSheetContext.Provider value={{ hideDragIndicator }}>\n        {children}\n      </ActionSheetContext.Provider>\n    </Modal>\n  );\n};\n\nexport default memo(forwardRef(Actionsheet));\n"]},"metadata":{},"sourceType":"module"}