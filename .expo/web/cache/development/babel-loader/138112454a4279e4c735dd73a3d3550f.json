{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useCallback } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Avatar, HStack, Pressable, Text } from \"native-base\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useNetInfo } from \"@react-native-community/netinfo\";\nimport { setAuth, selectAuth } from \"../../contexts/slices/authSlice\";\nimport AppScanner from \"../../components/AppScanner\";\nimport { getCurrentTimeStamp } from \"../../utils/date\";\nimport { getTimeFromToken } from \"../../utils/token\";\nimport { expireTime } from \"../../configs/token\";\nimport { DynamicMenu } from \"../../components/DynamicMenu\";\nimport Logo from \"../../components/Logo\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Login = React.lazy(function () {\n  return import(\"../Login\");\n});\nvar Menu = React.lazy(function () {\n  return import(\"../Menu\");\n});\nvar Error404 = React.lazy(function () {\n  return import(\"../Error404\");\n});\nvar Main = function Main() {\n  var _authResult$data, _authResult$data$perm;\n  var Stack = createStackNavigator();\n  var dispatch = useDispatch();\n  var _useSelector = useSelector(selectAuth),\n    authResult = _useSelector.authResult;\n  var NetInfo = useNetInfo();\n  var validateToken = useCallback(function _callee() {\n    var auth, accessTime, currentTime;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.t0 = JSON;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"auth\"));\n          case 4:\n            _context.t1 = _context.sent;\n            if (_context.t1) {\n              _context.next = 7;\n              break;\n            }\n            _context.t1 = \"{}\";\n          case 7:\n            _context.t2 = _context.t1;\n            auth = _context.t0.parse.call(_context.t0, _context.t2);\n            if (auth.status) {\n              accessTime = getTimeFromToken(auth.data.token);\n              currentTime = getCurrentTimeStamp();\n              if (currentTime - accessTime > expireTime) {\n                Alert.alert(\"Alert\", \"Your token is expired, please login again\", [{\n                  text: \"OK\",\n                  onPress: function onPress() {\n                    dispatch(setAuth({}));\n                  }\n                }]);\n              }\n              dispatch(setAuth(auth));\n            } else {\n              dispatch(setAuth({}));\n            }\n            _context.next = 15;\n            break;\n          case 12:\n            _context.prev = 12;\n            _context.t3 = _context[\"catch\"](0);\n            console.log(_context.t3);\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  }, [authResult]);\n  var handleLogout = useCallback(function () {\n    Alert.alert(\"CONFIRM LOGOUT\", authResult == null ? void 0 : authResult.data.UserName, [{\n      text: \"CANCEL\",\n      style: \"cancel\"\n    }, {\n      text: \"CONFIRM\",\n      style: \"default\",\n      onPress: function onPress() {\n        dispatch(setAuth({}));\n      }\n    }]);\n  }, [authResult]);\n  useEffect(function () {\n    validateToken();\n  }, []);\n  return _jsx(_Fragment, {\n    children: _jsx(Stack.Navigator, {\n      children: authResult != null && authResult.status ? _jsxs(_Fragment, {\n        children: [_jsx(Stack.Screen, {\n          name: \"Menu\",\n          component: Menu,\n          options: function options() {\n            return {\n              headerStyle: {\n                backgroundColor: \"#14439c\"\n              },\n              headerTitle: function headerTitle() {\n                return _jsx(Logo, {});\n              },\n              headerRight: function headerRight() {\n                return _jsx(HStack, {\n                  space: 2,\n                  pr: \"2\",\n                  children: _jsx(Pressable, {\n                    onPress: function onPress() {\n                      return handleLogout();\n                    },\n                    children: function children(_ref) {\n                      var isHovered = _ref.isHovered,\n                        isPressed = _ref.isPressed;\n                      return _jsxs(Avatar, {\n                        bg: \"blue.700\",\n                        size: \"sm\",\n                        mt: 1,\n                        w: Platform.OS === \"ios\" ? 10 : 100,\n                        color: isPressed ? \"blue.900\" : isHovered ? \"blue.900\" : \"blue.700\",\n                        style: {\n                          transform: [{\n                            scale: isPressed ? 0.96 : 1\n                          }]\n                        },\n                        children: [Platform.OS === \"ios\" ? authResult.data.UserName.charAt(0).toUpperCase() : _jsx(Text, {\n                          mb: 1,\n                          bold: true,\n                          isTruncated: true,\n                          color: \"warmGray.50\",\n                          children: authResult.data.UserName\n                        }), _jsx(Avatar.Badge, {\n                          bg: NetInfo.isConnected ? \"green.500\" : \"red.500\"\n                        })]\n                      });\n                    }\n                  })\n                });\n              }\n            };\n          }\n        }), authResult == null ? void 0 : (_authResult$data = authResult.data) == null ? void 0 : (_authResult$data$perm = _authResult$data.permission) == null ? void 0 : _authResult$data$perm.map(function (value, index) {\n          return _jsx(Stack.Screen, {\n            name: value.MenuId,\n            options: function options() {\n              return {\n                title: \"\" + value.MenuName.toUpperCase(),\n                headerStyle: {\n                  backgroundColor: \"#14439c\"\n                },\n                headerTitleStyle: {\n                  color: \"#FFFEFE\",\n                  fontWeight: \"bold\"\n                },\n                headerTintColor: \"#FFFEFE\"\n              };\n            },\n            component: DynamicMenu[value.MenuId] ? DynamicMenu[value.MenuId] : Error404\n          }, index);\n        }), _jsx(Stack.Screen, {\n          name: \"AppScanner\",\n          component: AppScanner\n        })]\n      }) : _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: Login,\n        options: function options() {\n          return {\n            headerShown: false\n          };\n        }\n      })\n    })\n  });\n};\nexport default Main;","map":{"version":3,"names":["React","useEffect","useCallback","Platform","useDispatch","useSelector","Avatar","HStack","Pressable","Text","Alert","createStackNavigator","AsyncStorage","useNetInfo","setAuth","selectAuth","AppScanner","getCurrentTimeStamp","getTimeFromToken","expireTime","DynamicMenu","Logo","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Login","lazy","Menu","Error404","Main","_authResult$data","_authResult$data$perm","Stack","dispatch","_useSelector","authResult","NetInfo","validateToken","_callee","auth","accessTime","currentTime","_regeneratorRuntime","async","_callee$","_context","prev","next","t0","JSON","awrap","getItem","t1","sent","t2","parse","call","status","data","token","alert","text","onPress","t3","console","log","stop","Promise","handleLogout","UserName","style","children","Navigator","Screen","name","component","options","headerStyle","backgroundColor","headerTitle","headerRight","space","pr","_ref","isHovered","isPressed","bg","size","mt","w","OS","color","transform","scale","charAt","toUpperCase","mb","bold","isTruncated","Badge","isConnected","permission","map","value","index","MenuId","title","MenuName","headerTitleStyle","fontWeight","headerTintColor","headerShown"],"sources":["D:/after-sale-mobile/src/views/Main/Main.tsx"],"sourcesContent":["import React, { useEffect, useCallback } from \"react\";\r\nimport { Platform } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Avatar, HStack, Pressable, Text } from \"native-base\";\r\nimport { Alert } from \"react-native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { useNetInfo } from \"@react-native-community/netinfo\";\r\n\r\nimport { setAuth, selectAuth } from \"../../contexts/slices/authSlice\";\r\n\r\nimport AppScanner from \"../../components/AppScanner\";\r\nimport { getCurrentTimeStamp } from \"../../utils/date\";\r\nimport { getTimeFromToken } from \"../../utils/token\";\r\nimport { expireTime } from \"../../configs/token\";\r\n\r\nimport { DynamicMenu } from \"../../components/DynamicMenu\";\r\nimport Logo from \"../../components/Logo\";\r\n\r\nconst Login = React.lazy(() => import(\"../Login\"));\r\nconst Menu = React.lazy(() => import(\"../Menu\"));\r\nconst Error404 = React.lazy(() => import(\"../Error404\"));\r\n\r\nconst Main: React.FC = () => {\r\n  const Stack: any = createStackNavigator();\r\n  const dispatch = useDispatch();\r\n  const { authResult } = useSelector(selectAuth);\r\n\r\n  const NetInfo = useNetInfo();\r\n\r\n  const validateToken = useCallback(async () => {\r\n    try {\r\n      //? get token, status from AsyncStorage\r\n      const auth: any = JSON.parse(\r\n        (await AsyncStorage.getItem(\"auth\")) || \"{}\"\r\n      );\r\n\r\n      if (auth.status) {\r\n        const accessTime = getTimeFromToken(auth.data.token);\r\n        const currentTime = getCurrentTimeStamp();\r\n\r\n        //? if token is expired\r\n        if (currentTime - accessTime > expireTime) {\r\n          Alert.alert(\"Alert\", \"Your token is expired, please login again\", [\r\n            {\r\n              text: \"OK\",\r\n              onPress: () => {\r\n                dispatch(setAuth({}));\r\n              },\r\n            },\r\n          ]);\r\n        }\r\n\r\n        //? if token is valid\r\n        dispatch(setAuth(auth));\r\n      } else {\r\n        dispatch(setAuth({}));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [authResult]);\r\n\r\n  const handleLogout = useCallback(() => {\r\n    Alert.alert(\"CONFIRM LOGOUT\", authResult?.data.UserName, [\r\n      {\r\n        text: \"CANCEL\",\r\n        style: \"cancel\",\r\n      },\r\n      {\r\n        text: \"CONFIRM\",\r\n        style: \"default\",\r\n        onPress: () => {\r\n          dispatch(setAuth({}));\r\n        },\r\n      },\r\n    ]);\r\n  }, [authResult]);\r\n\r\n  useEffect(() => {\r\n    validateToken();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Stack.Navigator>\r\n        {authResult?.status ? (\r\n          <>\r\n            <Stack.Screen\r\n              name=\"Menu\"\r\n              component={Menu}\r\n              options={() => ({\r\n                headerStyle: {\r\n                  backgroundColor: /* \"#2471A3\" */ \"#14439c\",\r\n                },\r\n                headerTitle: () => <Logo />,\r\n                headerRight: () => (\r\n                  <HStack space={2} pr=\"2\">\r\n                    <Pressable onPress={() => handleLogout()}>\r\n                      {({ isHovered, isPressed }) => {\r\n                        return (\r\n                          <Avatar\r\n                            bg=\"blue.700\"\r\n                            size=\"sm\"\r\n                            mt={1}\r\n                            w={Platform.OS === \"ios\" ? 10 : 100}\r\n                            color={\r\n                              isPressed\r\n                                ? \"blue.900\"\r\n                                : isHovered\r\n                                ? \"blue.900\"\r\n                                : \"blue.700\"\r\n                            }\r\n                            style={{\r\n                              transform: [\r\n                                {\r\n                                  scale: isPressed ? 0.96 : 1,\r\n                                },\r\n                              ],\r\n                            }}\r\n                          >\r\n                            {Platform.OS === \"ios\" ? (\r\n                              authResult.data.UserName.charAt(0).toUpperCase()\r\n                            ) : (\r\n                              <Text mb={1} bold isTruncated color=\"warmGray.50\">\r\n                                {authResult.data.UserName}\r\n                              </Text>\r\n                            )}\r\n                            <Avatar.Badge\r\n                              bg={NetInfo.isConnected ? \"green.500\" : \"red.500\"}\r\n                            />\r\n                          </Avatar>\r\n                        );\r\n                      }}\r\n                    </Pressable>\r\n                  </HStack>\r\n                ),\r\n              })}\r\n            />\r\n\r\n            {authResult?.data?.permission?.map((value: any, index: number) => {\r\n              return (\r\n                <Stack.Screen\r\n                  key={index}\r\n                  name={value.MenuId}\r\n                  options={() => ({\r\n                    title: `${value.MenuName.toUpperCase()}`,\r\n                    headerStyle: {\r\n                      backgroundColor: /* \"#2471A3\" */ \"#14439c\",\r\n                    },\r\n                    headerTitleStyle: {\r\n                      color: \"#FFFEFE\",\r\n                      fontWeight : \"bold\"\r\n                    },\r\n                    headerTintColor: \"#FFFEFE\",\r\n                  })}\r\n                  component={\r\n                    DynamicMenu[value.MenuId]\r\n                      ? DynamicMenu[value.MenuId]\r\n                      : Error404\r\n                  }\r\n                />\r\n              );\r\n            })}\r\n\r\n            <Stack.Screen name=\"AppScanner\" component={AppScanner} />\r\n          </>\r\n        ) : (\r\n          <Stack.Screen\r\n            name=\"Login\"\r\n            component={Login}\r\n            options={() => ({\r\n              headerShown: false,\r\n            })}\r\n          />\r\n        )}\r\n      </Stack.Navigator>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}