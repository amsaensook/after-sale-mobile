{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"wrapperRef\", \"isHovered\", \"isFocusVisible\"],\n  _excluded2 = [\"isInvalid\", \"isReadOnly\", \"isIndeterminate\"],\n  _excluded3 = [\"icon\", \"_interactionBox\", \"_icon\", \"_stack\", \"_text\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from \"../../../utils\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { Center } from \"../../composites/Center\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nimport Box from \"../Box\";\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from \"./CheckboxGroup\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { combineContextAndProps } from \"../../../utils\";\nimport SizedIcon from \"./SizedIcon\";\nimport { Stack } from \"../Stack\";\nimport { wrapStringChild } from \"../../../utils/wrapStringChild\";\nvar Checkbox = function Checkbox(_ref2, ref) {\n  var wrapperRef = _ref2.wrapperRef,\n    isHoveredProp = _ref2.isHovered,\n    isFocusVisibleProp = _ref2.isFocusVisible,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var formControlContext = useFormControlContext();\n  var _combineContextAndPro = combineContextAndProps(formControlContext, props),\n    isInvalid = _combineContextAndPro.isInvalid,\n    isReadOnly = _combineContextAndPro.isReadOnly,\n    isIndeterminate = _combineContextAndPro.isIndeterminate,\n    combinedProps = _objectWithoutProperties(_combineContextAndPro, _excluded2);\n  var checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  var state = useToggleState(_objectSpread(_objectSpread({}, props), {}, {\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked\n  }));\n  var _ref = React.useRef();\n  var mergedRef = mergeRefs([ref, _ref]);\n  var _ref3 = checkboxGroupContext ? useCheckboxGroupItem(_objectSpread(_objectSpread({}, combinedProps), {}, {\n      'aria-label': combinedProps.accessibilityLabel,\n      'value': combinedProps.value\n    }), checkboxGroupContext.state, mergedRef) : useCheckbox(_objectSpread(_objectSpread({}, combinedProps), {}, {\n      'aria-label': combinedProps.accessibilityLabel\n    }), state, mergedRef),\n    groupItemInputProps = _ref3.inputProps;\n  var inputProps = React.useMemo(function () {\n    return groupItemInputProps;\n  }, [groupItemInputProps.checked, groupItemInputProps.disabled, groupItemInputProps]);\n  var _React$useState = React.useState(_objectSpread(_objectSpread({}, checkboxGroupContext), combinedProps)),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    contextCombinedProps = _React$useState2[0];\n  return React.createElement(CheckboxComponent, {\n    wrapperRef: wrapperRef,\n    mergedRef: mergedRef,\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly,\n    isHovered: isHoveredProp,\n    isIndeterminate: isIndeterminate,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\nvar CheckboxComponent = React.memo(function (_ref4) {\n  var wrapperRef = _ref4.wrapperRef,\n    inputProps = _ref4.inputProps,\n    combinedProps = _ref4.combinedProps,\n    isInvalid = _ref4.isInvalid,\n    isReadOnly = _ref4.isReadOnly,\n    isIndeterminate = _ref4.isIndeterminate,\n    mergedRef = _ref4.mergedRef,\n    isHoveredProp = _ref4.isHovered,\n    isFocusVisibleProp = _ref4.isFocusVisible;\n  var _ref = React.useRef();\n  var _useHover = useHover({}, _ref),\n    isHovered = _useHover.isHovered;\n  var isChecked = inputProps.checked,\n    isDisabled = inputProps.disabled;\n  var _useFocusRing = useFocusRing(),\n    focusProps = _useFocusRing.focusProps,\n    isFocusVisible = _useFocusRing.isFocusVisible;\n  var _usePropsResolution = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid: isInvalid,\n      isReadOnly: isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled: isDisabled,\n      isIndeterminate: isIndeterminate,\n      isChecked: isChecked,\n      isHovered: isHovered || isHoveredProp\n    }),\n    icon = _usePropsResolution.icon,\n    _interactionBox = _usePropsResolution._interactionBox,\n    _icon = _usePropsResolution._icon,\n    _stack = _usePropsResolution._stack,\n    _text = _usePropsResolution._text,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded3);\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.layout), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), ['_text'])),\n    _extractInObject2 = _slicedToArray(_extractInObject, 2),\n    layoutProps = _extractInObject2[0],\n    nonLayoutProps = _extractInObject2[1];\n  var component = React.useMemo(function () {\n    return React.createElement(Stack, _extends({}, _stack, layoutProps), React.createElement(Center, null, React.createElement(Box, _interactionBox), React.createElement(Center, nonLayoutProps, React.createElement(SizedIcon, {\n      icon: icon,\n      _icon: _icon,\n      isChecked: isChecked\n    }))), wrapStringChild(resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.children, _text));\n  }, [_icon, _stack, _text, _interactionBox, icon, isChecked, nonLayoutProps, layoutProps, resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.children]);\n  var mergedWrapperRef = React.useMemo(function () {\n    return mergeRefs([wrapperRef, _ref]);\n  }, [wrapperRef]);\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  return React.createElement(Box, {\n    accessibilityRole: \"label\",\n    ref: mergedWrapperRef\n  }, React.createElement(VisuallyHidden, null, React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: mergedRef\n  }))), component);\n});\nexport default memo(forwardRef(Checkbox));","map":{"version":3,"sources":["Checkbox.web.tsx"],"names":["React","memo","forwardRef","mergeRefs","usePropsResolution","Center","useFormControlContext","Box","useToggleState","VisuallyHidden","CheckboxGroupContext","useHover","useCheckbox","useCheckboxGroupItem","useFocusRing","useHasResponsiveProps","extractInObject","stylingProps","combineContextAndProps","SizedIcon","Stack","wrapStringChild","Checkbox","wrapperRef","isHovered","isHoveredProp","isFocusVisible","isFocusVisibleProp","props","ref","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","useContext","state","defaultSelected","defaultIsChecked","isSelected","isChecked","_ref","useRef","mergedRef","inputProps","groupItemInputProps","accessibilityLabel","value","useMemo","checked","disabled","contextCombinedProps","useState","CheckboxComponent","isDisabled","focusProps","icon","_interactionBox","_icon","_stack","_text","resolvedProps","layoutProps","nonLayoutProps","margin","layout","flexbox","position","component","children","mergedWrapperRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n    groupItemInputProps,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...checkboxGroupContext,\n    ...combinedProps,\n  });\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isHovered={isHoveredProp}\n      isIndeterminate={isIndeterminate}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: isHovered || isHoveredProp,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n    const component = React.useMemo(() => {\n      return (\n        <Stack {..._stack} {...layoutProps}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {/* {resolvedProps?.children} */}\n          {wrapStringChild(resolvedProps?.children, _text)}\n        </Stack>\n      );\n    }, [\n      _icon,\n      _stack,\n      _text,\n      _interactionBox,\n      icon,\n      isChecked,\n      nonLayoutProps,\n      layoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]},"metadata":{},"sourceType":"module"}