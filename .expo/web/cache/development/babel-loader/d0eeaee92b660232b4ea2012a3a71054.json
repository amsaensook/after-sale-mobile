{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useQuery, useMutation, useQueryClient } from \"react-query\";\nimport { httpClient } from \"../services/axios\";\nexport var useCountStock = function useCountStock() {\n  var getCountStock = function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(httpClient.get('/count_stock'));\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  return useQuery(\"CountStock\", function () {\n    return getCountStock();\n  }, {\n    enabled: true,\n    refetchOnWindowFocus: true,\n    refetchOnMount: true\n  });\n};\nexport var useCountStockItem = function useCountStockItem(_ref) {\n  var CountStock_ID = _ref.CountStock_ID;\n  var getCountStockItem = function _callee2(CountStock_ID) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(httpClient.get(\"/count_stock_item?CountStock_ID=\" + CountStock_ID));\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  return useQuery([\"CountStockItem\", CountStock_ID], function () {\n    return getCountStockItem(CountStock_ID);\n  }, {\n    enabled: true\n  });\n};\nexport var useExecCountStockItem = function useExecCountStockItem() {\n  var queryClient = useQueryClient();\n  var execCountStockItem = function _callee3(params) {\n    var data;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            data = new FormData();\n            Object.keys(params).forEach(function (value) {\n              data.append(value, params[value] || \"\");\n            });\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(httpClient.post(\"/exec_count_stock_item\", data));\n          case 4:\n            return _context3.abrupt(\"return\", _context3.sent);\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  return useMutation(\"ExecCountStockItem\", function (params) {\n    return execCountStockItem(params);\n  }, {\n    onSuccess: function onSuccess(response) {\n      queryClient.invalidateQueries('CountStockItem');\n    },\n    onError: function onError(error) {\n      var _error$response, _error$response$data;\n      console.log((error == null ? void 0 : (_error$response = error.response) == null ? void 0 : (_error$response$data = _error$response.data) == null ? void 0 : _error$response$data.message) || error.message);\n    }\n  });\n};\nexport var useUpdateCountStock = function useUpdateCountStock() {\n  var queryClient = useQueryClient();\n  var updateCountStock = function _callee4(params) {\n    var data;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            data = new FormData();\n            Object.keys(params).forEach(function (value) {\n              data.append(value, params[value] || \"\");\n            });\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(httpClient.post(\"/update_count_stock\", data));\n          case 4:\n            return _context4.abrupt(\"return\", _context4.sent);\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  return useMutation(\"UpdateCountStock\", function (params) {\n    return updateCountStock(params);\n  }, {\n    onSuccess: function onSuccess(response) {\n      queryClient.invalidateQueries('CountStock');\n    },\n    onError: function onError(error) {\n      var _error$response2, _error$response2$data;\n      console.log((error == null ? void 0 : (_error$response2 = error.response) == null ? void 0 : (_error$response2$data = _error$response2.data) == null ? void 0 : _error$response2$data.message) || error.message);\n    }\n  });\n};","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","httpClient","useCountStock","getCountStock","_callee","_regeneratorRuntime","async","_callee$","_context","prev","next","awrap","get","abrupt","sent","stop","Promise","enabled","refetchOnWindowFocus","refetchOnMount","useCountStockItem","_ref","CountStock_ID","getCountStockItem","_callee2","_callee2$","_context2","useExecCountStockItem","queryClient","execCountStockItem","_callee3","params","data","_callee3$","_context3","FormData","Object","keys","forEach","value","append","post","onSuccess","response","invalidateQueries","onError","error","_error$response","_error$response$data","console","log","message","useUpdateCountStock","updateCountStock","_callee4","_callee4$","_context4","_error$response2","_error$response2$data"],"sources":["D:/after-sale-mobile/src/hooks/useCountStock.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"react-query\";\r\nimport { httpClient } from \"../services/axios\";\r\n\r\nexport const useCountStock = () => {\r\n  const getCountStock = async () => {\r\n    return await httpClient.get('/count_stock');\r\n  };\r\n  return useQuery(\r\n    \"CountStock\",\r\n    () => getCountStock(),\r\n    {\r\n      enabled: true,\r\n      refetchOnWindowFocus: true,\r\n      refetchOnMount: true,\r\n      //staleTime: 30000, // not to refresh the data from API is 30 seconds\r\n    }\r\n  );\r\n};\r\n\r\nexport const useCountStockItem = ({CountStock_ID}: any) => {\r\n\r\n  const getCountStockItem = async (CountStock_ID: any) => {\r\n    \r\n    return await httpClient.get(`/count_stock_item?CountStock_ID=${CountStock_ID}`);\r\n  };\r\n  return useQuery<any, any, any>(\r\n    [\"CountStockItem\", CountStock_ID],\r\n    () => getCountStockItem(CountStock_ID),\r\n    {\r\n      enabled: true,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useExecCountStockItem = () => {\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const execCountStockItem = async (params: any): Promise<any> => {\r\n    let data = new FormData();\r\n\r\n    Object.keys(params).forEach((value) => {\r\n      data.append(value, params[value] || \"\");\r\n    });\r\n\r\n    return await httpClient.post(\"/exec_count_stock_item\", data);\r\n  };\r\n\r\n  return useMutation<any, any, any>(\r\n    \"ExecCountStockItem\",\r\n    (params) => execCountStockItem(params),\r\n    {\r\n      onSuccess: (response) => {\r\n\r\n        queryClient.invalidateQueries('CountStockItem');\r\n\r\n      },\r\n      onError: (error) => {\r\n\r\n        console.log(error?.response?.data?.message || error.message);\r\n\r\n      },\r\n    }\r\n  );\r\n};\r\n\r\nexport const useUpdateCountStock = () => {\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const updateCountStock = async (params: any): Promise<any> => {\r\n    let data = new FormData();\r\n\r\n    Object.keys(params).forEach((value) => {\r\n      data.append(value, params[value] || \"\");\r\n    });\r\n\r\n    return await httpClient.post(\"/update_count_stock\", data);\r\n  };\r\n\r\n  return useMutation<any, any, any>(\r\n    \"UpdateCountStock\",\r\n    (params) => updateCountStock(params),\r\n    {\r\n      onSuccess: (response) => {\r\n\r\n        queryClient.invalidateQueries('CountStock');\r\n\r\n      },\r\n      onError: (error) => {\r\n\r\n        console.log(error?.response?.data?.message || error.message);\r\n\r\n      },\r\n    }\r\n  );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}